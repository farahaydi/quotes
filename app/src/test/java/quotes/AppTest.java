/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.jupiter.api.Test;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    public void testQuotes() throws IOException {
        InputStream inputStream = getClass().getResourceAsStream("/recentquotes.json");
        Reader reader = new InputStreamReader(inputStream);

        Gson gson = new Gson();
        RecentQuotes[] quotes = gson.fromJson(reader, RecentQuotes[].class);


        assertTrue(quotes.length > 0, "There should be at least one quote");


        Random random = new Random();
        int randomIndex = random.nextInt(quotes.length);

        String randomQuote = quotes[randomIndex].getText();
        String randomAuthor = quotes[randomIndex].getAuthor();

        assertFalse(randomQuote.isEmpty(), "The random quote should not be empty");
        assertFalse(randomAuthor.isEmpty(), "The random author should not be empty");
        if (randomQuote.equals("")) {
            System.out.println("There is no quotes for this author");
        }
    }

    @Test
    public void testReadFromApi() throws IOException {
        URL quoteUrl = new URL("https://favqs.com/api/qotd?token=a4c5260ddff106ce351772ca2370f6d1");
        HttpURLConnection quoteConnection = (HttpURLConnection) quoteUrl.openConnection();
        quoteConnection.setRequestMethod("GET");
        InputStreamReader readQuote = new InputStreamReader(quoteConnection.getInputStream());
        BufferedReader readBufferQuote = new BufferedReader(readQuote);
        String quoteData = readBufferQuote.readLine();

        assertNotNull(quoteData);

        Gson gson = new Gson();
        MainQuote mainQuote = gson.fromJson(quoteData, MainQuote.class);

        assertNotNull(mainQuote);
        assertNotNull(mainQuote.getQuote());
        assertNotNull(mainQuote.getQuote().getBody());
        assertNotNull(mainQuote.getQuote().getAuthor());
    }

    @Test
    public void testUseExsistFile() {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();

        RecentQuotes[] existingQuotes;
        try (BufferedReader existingReader = new BufferedReader(new FileReader("app/src/main/resources/recentquotes.json"))) {
            existingQuotes = gson.fromJson(existingReader, RecentQuotes[].class);
        } catch (IOException e) {
            existingQuotes = new RecentQuotes[0];
        }
        assertNotNull(existingQuotes);
    }
    }

